function makeAFormReadOnly(e, t = !0) {
  if (e && void 0 !== e.elements)
    for (var a = e.elements, n = 0, i = a.length; n < i; ++n) a[n].readOnly = t;
}
function disableAButton(e, t = !0) {
  e && (e.disabled = t);
}
function updateWebsiteSetting(e) {
  if ("setting" == e) {
    var t = document.getElementById("form-edit-lp-website"),
      a = document.getElementById("button-form-edit-lp-website"),
      n = new FormData(t);
    n.append("mode", e);
    var i = new XMLHttpRequest();
    makeAFormReadOnly(t, !0),
      disableAButton(a, !0),
      i.open("POST", SITE_URL + "pengaturanlandingpage", !0),
      i.setRequestHeader(
        "Content-Type",
        "application/x-www-form-urlencoded; charset=UTF-8"
      );
    var d = new URLSearchParams(n).toString();
    i.send(d),
      (i.onload = function () {
        i.status >= 200 && i.status < 400
          ? Swal.fire(
              "Updated!",
              "Pengaturan website berhasil diupdate.",
              "success"
            ).then((e) => {
              var n = JSON.parse(i.responseText);
              (document.getElementById("field_company_name").value =
                n.data.company_name),
                (document.getElementById("field_company_title").value =
                  n.data.company_title),
                makeAFormReadOnly(t, !1),
                disableAButton(a, !1);
            })
          : Swal.fire(
              "Failed!",
              "Pengaturan website gagal diupdate.",
              "error"
            ).then(() => {
              makeAFormReadOnly(t, !1), disableAButton(a, !1);
            });
      });
  }
}
function updateAboutSetting(
  e,
  t,
  a,
  n,
  i = null,
  d = null,
  l = null,
  o = null
) {
  var r = new XMLHttpRequest();
  "function" == typeof i && i(),
    r.open("POST", SITE_URL + "pengaturanlandingpage", !0),
    r.setRequestHeader(
      "Content-Type",
      "application/x-www-form-urlencoded; charset=UTF-8"
    ),
    r.send(
      `mode=setting_about&id=${e}&title=${t}&subtitle=${a}&description=${n}`
    ),
    (r.onload = function () {
      r.status >= 200 && r.status < 400
        ? Swal.fire(
            "Updated!",
            "Pengaturan about berhasil diupdate.",
            "success"
          ).then((e) => {
            var t = JSON.parse(r.responseText);
            "function" == typeof l && l(t), "function" == typeof d && d();
          })
        : Swal.fire(
            "Failed!",
            "Pengaturan about gagal diupdate.",
            "error"
          ).then(() => {
            "function" == typeof d && d(), "function" == typeof o && o();
          });
    });
}
window.addEventListener("DOMContentLoaded", function () {
  function e(e) {
    let t = document.getElementById("target-element"),
      a = document.getElementById(e);
    t && a && (t.innerHTML = document.getElementById(e).innerHTML);
  }
  this.document.getElementById("previewImageModal") &&
    this.document
      .getElementById("previewImageModal")
      .addEventListener("show.bs.modal", function (e) {
        var t = e.relatedTarget.dataset.img,
          a = document.getElementById("modal-preview-image-img-preview");
        a && (a.src = t);
      }),
    this.document.getElementById("button-form-edit-lp-widget1") &&
      this.document
        .getElementById("button-form-edit-lp-widget1")
        .addEventListener("click", function (e) {
          var t = document.getElementById("field_about_title1"),
            a = document.getElementById("field_about_subtitle1"),
            n = document.getElementById("field_about_description1"),
            i = t.value,
            d = a.value,
            l = n.value;
          updateAboutSetting(
            1,
            t.value,
            a.value,
            n.value,
            () => {
              (t.readOnly = !0), (a.readOnly = !0), (n.readOnly = !0);
            },
            () => {
              (t.readOnly = !1), (a.readOnly = !1), (n.readOnly = !1);
            },
            (e) => {
              console.log(e),
                (t.value = e.data.about_title),
                (a.value = e.data.about_subtitle),
                (n.value = e.data.about_description);
            },
            () => {
              (t.value = i), (a.value = d), (n.value = l);
            }
          );
        }),
    this.document.getElementById("button-form-edit-lp-widget2") &&
      this.document
        .getElementById("button-form-edit-lp-widget2")
        .addEventListener("click", function (e) {
          var t = document.getElementById("field_about_title2"),
            a = document.getElementById("field_about_subtitle2"),
            n = document.getElementById("field_about_description2"),
            i = t.value,
            d = a.value,
            l = n.value;
          updateAboutSetting(
            2,
            t.value,
            a.value,
            n.value,
            () => {
              (t.readOnly = !0), (a.readOnly = !0), (n.readOnly = !0);
            },
            () => {
              (t.readOnly = !1), (a.readOnly = !1), (n.readOnly = !1);
            },
            (e) => {
              (t.value = e.data.about_title),
                (a.value = e.data.about_subtitle),
                (n.value = e.data.about_description);
            },
            () => {
              (t.value = i), (a.value = d), (n.value = l);
            }
          );
        }),
    this.document.querySelectorAll(".btn-delete-kandidat").forEach((e, t) => {
      e.addEventListener("click", function () {
        let e = this.dataset.kandidat,
          t = this.dataset.kandidat_nama;
        Swal.fire({
          title: "Are you sure?",
          text: `Data kandidat atas nama ${t} akan dihapus!`,
          icon: "warning",
          showCancelButton: !0,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, delete it!",
          allowOutsideClick: () => !1,
        }).then((t) => {
          if (t.isConfirmed) {
            var a = new XMLHttpRequest();
            a.open("POST", SITE_URL + "kandidat/delete", !0),
              a.setRequestHeader(
                "Content-Type",
                "application/x-www-form-urlencoded; charset=UTF-8"
              ),
              (a.onload = function () {
                a.status >= 200 && a.status < 400
                  ? Swal.fire(
                      "Deleted!",
                      "Data kandidat berhasil dihapus.",
                      "success"
                    ).then((e) => {
                      document.location.reload();
                    })
                  : Swal.fire(
                      "Failed!",
                      "Data kandidat gagal dihapus.",
                      "error"
                    );
              }),
              a.send("kandidat=" + e);
          }
        });
      });
    }),
    e("data-diri"),
    this.document.querySelectorAll(".btn-edit-kandidat").forEach((t, a) => {
      t.addEventListener("click", function () {
        e(this.dataset.target);
      });
    });
  let t = this.document.getElementById("changeImageModal"),
    a = this.document.getElementById("form-change-image-file-input"),
    n = this.document.getElementById("form-change-image-img-preview"),
    i = this.document.getElementById("form-change-image-button-update"),
    d = this.document.getElementById("form-change-image-info-text"),
    l = this.document.getElementById("form-change-image");
  var o = "",
    r = "";
  t &&
    (t.addEventListener("hide.bs.modal", function (e) {
      (n.src = ""),
        (d.innerText = ""),
        (o = ""),
        (a.value = null),
        (a.files = null);
    }),
    t.addEventListener("show.bs.modal", function (e) {
      (o = e.relatedTarget.dataset.destination),
        (r = e.relatedTarget.dataset.domimgtarget),
        o || (console.log(o), console.error("Destination is missing")),
        r || (console.log(r), console.error("Destination is missing")),
        (r = document.getElementById(r));
    }),
    (a.onchange = function (e) {
      let [t] = a.files;
      t && t.type.toLowerCase().includes("image")
        ? (n.src = URL.createObjectURL(t))
        : (n.src = "");
    }),
    i.addEventListener("click", function (e) {
      let [u] = a.files;
      if (u) {
        if (((d.innerText = ""), u.type.toLowerCase().includes("image"))) {
          if (o) {
            makeAFormReadOnly(l, !0), disableAButton(i, !0);
            var s = new FormData(document.getElementById("form-change-image"));
            s.append("destination", o), s.append("mode", "change_image");
            var m = new XMLHttpRequest();
            m.open("POST", SITE_URL + "pengaturanlandingpage", !0),
              m.send(s),
              (m.onload = function () {
                m.status >= 200 && m.status < 400
                  ? Swal.fire(
                      "Updated!",
                      "Gambar berhasil di perbarui.",
                      "success"
                    ).then((e) => {
                      var u = JSON.parse(m.responseText);
                      makeAFormReadOnly(l, !1),
                        disableAButton(i, !1),
                        (n.src = ""),
                        (d.innerText = ""),
                        (o = ""),
                        (a.value = null),
                        (a.files = null),
                        r && (r.src = u.data.file_url);
                      bootstrap.Modal.getOrCreateInstance(t).toggle();
                    })
                  : Swal.fire(
                      "Failed!",
                      "Gambar berhasil di perbarui..",
                      "error"
                    ).then(() => {
                      makeAFormReadOnly(l, !1), disableAButton(i, !1);
                    });
              });
          } else console.error("Destination is missing");
        } else d.innerText = "File yang dipilih tidak valid!";
      } else d.innerText = "Tidak ada gambar yang dipilih!";
    }));
});
